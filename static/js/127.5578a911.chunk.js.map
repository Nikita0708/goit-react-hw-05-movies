{"version":3,"file":"static/js/127.5578a911.chunk.js","mappings":"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","sources":["components/API/Api.jsx","webpack://react-homework-template/./src/components/Home/home.module.css?3638","components/MovieList/MovieList.jsx","components/SearchMovies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst key = 'e32606210989f5ad28c9406f2323d1f2';\n\nexport async function fetchTrending() {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${key}`);\n  const response = data.results;\n  return response;\n}\n\nexport async function fetchMoviesWithQuery(searchQuery) {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${key}&language=en-US&page=1&query=${searchQuery}`\n  );\n  return data.results;\n}\n\nexport async function fetchMovieDetails(id) {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${key}&language=en-US`\n  );\n  return data;\n}\n\nexport async function fetchCast(id) {\n  const { data } = await axios.get(\n    `/movie/${id}/credits?api_key=${key}&language=en-US`\n  );\n\n  return data.cast;\n}\n\nexport async function fetchReviews(id) {\n  const { data } = await axios.get(\n    `/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`\n  );\n  return data.results;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"home_list__H1Xm-\",\"poster\":\"home_poster__G9a7q\",\"item\":\"home_item__jriNW\"};","import { Link, useLocation } from 'react-router-dom';\nimport s from '../Home/home.module.css';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className={s.list}>\n      {movies &&\n        movies.map(({ id, poster_path, title }) => (\n          <Link\n            to={`/movies/${id}`}\n            key={id}\n            state={{ from: location }}\n            className={s.item}\n          >\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n              alt={title}\n              className={s.poster}\n            />\n            <h3 className={s.title}>{title}</h3>\n          </Link>\n        ))}\n    </ul>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { fetchMoviesWithQuery } from 'components/API/Api';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { MovieList } from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const location = useLocation();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setQuery(e.currentTarget.elements.query.value.toLowerCase().trim());\n    setSearchParams({\n      query: e.currentTarget.elements.query.value.toLowerCase().trim(),\n    });\n  };\n  const currentQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (query !== '') {\n      const getMovieBySearch = async () => {\n        try {\n          const response = await fetchMoviesWithQuery(query);\n          setMovies(response);\n        } catch (error) {\n          console.log(error.message);\n        }\n      };\n      getMovieBySearch();\n    } else if (currentQuery) {\n      const getMovieBySearch = async () => {\n        try {\n          const response = await fetchMoviesWithQuery(currentQuery);\n          setMovies(response);\n        } catch (error) {\n          console.log(error.message);\n        }\n      };\n      getMovieBySearch();\n    }\n\n    return;\n  }, [query, currentQuery]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" autoComplete=\"off\" name=\"query\" />\n        <button type=\"submit\">search</button>\n      </form>\n      {movies.length !== 0 ? (\n        <MovieList movies={movies} location={location} />\n      ) : (\n        <p>No results found for {query}</p>\n      )}\n    </>\n  );\n};\nexport default Movies;\n"],"names":["axios","key","fetchTrending","data","response","results","fetchMoviesWithQuery","searchQuery","fetchMovieDetails","id","fetchCast","cast","fetchReviews","MovieList","movies","location","useLocation","className","s","map","poster_path","title","to","state","from","src","alt","useState","query","setQuery","setMovies","useSearchParams","searchParams","setSearchParams","currentQuery","get","useEffect","getMovieBySearch","console","log","message","onSubmit","e","preventDefault","currentTarget","elements","value","toLowerCase","trim","type","autoComplete","name","length"],"sourceRoot":""}